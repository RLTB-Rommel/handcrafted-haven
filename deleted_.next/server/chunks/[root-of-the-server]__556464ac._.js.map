{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/conni/Documents/Pathway/handcrafted-haven/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst globalForPrisma = globalThis as unknown as { prisma?: PrismaClient };\r\n\r\nexport const prisma =\r\n  globalForPrisma.prisma ??\r\n  new PrismaClient({\r\n    // log: [\"query\", \"info\", \"warn\", \"error\"],\r\n  });\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  globalForPrisma.prisma = prisma;\r\n}"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6IAAY,CAAC;AAEjB;AAEF,wCAA2C;IACzC,gBAAgB,MAAM,GAAG;AAC3B","debugId":null}},
    {"offset": {"line": 137, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/conni/Documents/Pathway/handcrafted-haven/app/api/products/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { getServerSession } from \"next-auth\";\r\nimport { prisma } from \"@/lib/prisma\";\r\n\r\nexport const dynamic = \"force-dynamic\";\r\n\r\n/** List all products (newest first) */\r\nexport async function GET() {\r\n  const items = await prisma.product.findMany({\r\n    orderBy: { createdAt: \"desc\" },\r\n    include: {\r\n      artisan: { select: { id: true, displayName: true, studioSlug: true } },\r\n    },\r\n  });\r\n  return NextResponse.json(items);\r\n}\r\n\r\n/** Create a product for the signed-in artisan */\r\nexport async function POST(req: Request) {\r\n  const session = await getServerSession();\r\n  if (!session?.user?.email) {\r\n    return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n  }\r\n\r\n  const { title, description, price, imageUrl } = await req.json();\r\n\r\n  if (!title || price === undefined || price === null || !imageUrl) {\r\n    return NextResponse.json({ error: \"Missing fields\" }, { status: 400 });\r\n  }\r\n\r\n  // find artisan (by email from session)\r\n  const artisan = await prisma.user.findUnique({\r\n    where: { email: session.user.email },\r\n    select: { id: true },\r\n  });\r\n  if (!artisan) {\r\n    return NextResponse.json({ error: \"User not found\" }, { status: 404 });\r\n  }\r\n\r\n  // Prisma Decimal accepts string; keep client price as string to avoid float issues.\r\n  const created = await prisma.product.create({\r\n    data: {\r\n      title,\r\n      description: description ?? null,\r\n      price: String(price),\r\n      imageUrl,\r\n      artisanId: artisan.id,\r\n    },\r\n  });\r\n\r\n  return NextResponse.json(created, { status: 201 });\r\n}"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;;;;AAEO,MAAM,UAAU;AAGhB,eAAe;IACpB,MAAM,QAAQ,MAAM,yHAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;QAC1C,SAAS;YAAE,WAAW;QAAO;QAC7B,SAAS;YACP,SAAS;gBAAE,QAAQ;oBAAE,IAAI;oBAAM,aAAa;oBAAM,YAAY;gBAAK;YAAE;QACvE;IACF;IACA,OAAO,+QAAY,CAAC,IAAI,CAAC;AAC3B;AAGO,eAAe,KAAK,GAAY;IACrC,MAAM,UAAU,MAAM,IAAA,uQAAgB;IACtC,IAAI,CAAC,SAAS,MAAM,OAAO;QACzB,OAAO,+QAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;IAEA,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;IAE9D,IAAI,CAAC,SAAS,UAAU,aAAa,UAAU,QAAQ,CAAC,UAAU;QAChE,OAAO,+QAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiB,GAAG;YAAE,QAAQ;QAAI;IACtE;IAEA,uCAAuC;IACvC,MAAM,UAAU,MAAM,yHAAM,CAAC,IAAI,CAAC,UAAU,CAAC;QAC3C,OAAO;YAAE,OAAO,QAAQ,IAAI,CAAC,KAAK;QAAC;QACnC,QAAQ;YAAE,IAAI;QAAK;IACrB;IACA,IAAI,CAAC,SAAS;QACZ,OAAO,+QAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiB,GAAG;YAAE,QAAQ;QAAI;IACtE;IAEA,oFAAoF;IACpF,MAAM,UAAU,MAAM,yHAAM,CAAC,OAAO,CAAC,MAAM,CAAC;QAC1C,MAAM;YACJ;YACA,aAAa,eAAe;YAC5B,OAAO,OAAO;YACd;YACA,WAAW,QAAQ,EAAE;QACvB;IACF;IAEA,OAAO,+QAAY,CAAC,IAAI,CAAC,SAAS;QAAE,QAAQ;IAAI;AAClD","debugId":null}}]
}