{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/conni/Documents/Pathway/handcrafted-haven/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst globalForPrisma = globalThis as unknown as { prisma?: PrismaClient };\r\n\r\nexport const prisma =\r\n  globalForPrisma.prisma ??\r\n  new PrismaClient({\r\n    // log: [\"query\", \"info\", \"warn\", \"error\"],\r\n  });\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  globalForPrisma.prisma = prisma;\r\n}"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6IAAY,CAAC;AAEjB;AAEF,wCAA2C;IACzC,gBAAgB,MAAM,GAAG;AAC3B","debugId":null}},
    {"offset": {"line": 131, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/conni/Documents/Pathway/handcrafted-haven/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth, { type NextAuthOptions } from \"next-auth\";\r\nimport Credentials from \"next-auth/providers/credentials\";\r\nimport { PrismaAdapter } from \"@auth/prisma-adapter\";\r\nimport { prisma } from \"@/lib/prisma\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n  adapter: PrismaAdapter(prisma),\r\n  session: { strategy: \"jwt\" },\r\n  providers: [\r\n    Credentials({\r\n      name: \"Credentials\",\r\n      credentials: { email: {}, password: {} },\r\n      async authorize(creds) {\r\n        if (!creds?.email || !creds?.password) return null;\r\n        const user = await prisma.user.findUnique({\r\n          where: { email: creds.email },\r\n          include: { artisan: true },\r\n        });\r\n        if (!user) return null;\r\n        const ok = await bcrypt.compare(creds.password, user.password);\r\n        if (!ok) return null;\r\n        return {\r\n          id: user.id,\r\n          email: user.email,\r\n          name: user.name ?? user.artisan?.displayName ?? \"Artisan\",\r\n          artisanSlug: user.artisan?.slug,\r\n        };\r\n      },\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    async jwt({ token, user }) {\r\n      if (user) {\r\n        token.userId = (user as any).id;\r\n        token.artisanSlug = (user as any).artisanSlug;\r\n      }\r\n      return token;\r\n    },\r\n    async session({ session, token }) {\r\n      session.userId = token.userId as string;\r\n      session.artisanSlug = token.artisanSlug as string;\r\n      if (session.user) session.user.artisanSlug = token.artisanSlug as string;\r\n      return session;\r\n    },\r\n  },\r\n};\r\n\r\nconst handler = NextAuth(authOptions);\r\nexport { handler as GET, handler as POST };"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEO,MAAM,cAA+B;IAC1C,SAAS,IAAA,iRAAa,EAAC,yHAAM;IAC7B,SAAS;QAAE,UAAU;IAAM;IAC3B,WAAW;QACT,IAAA,iRAAW,EAAC;YACV,MAAM;YACN,aAAa;gBAAE,OAAO,CAAC;gBAAG,UAAU,CAAC;YAAE;YACvC,MAAM,WAAU,KAAK;gBACnB,IAAI,CAAC,OAAO,SAAS,CAAC,OAAO,UAAU,OAAO;gBAC9C,MAAM,OAAO,MAAM,yHAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBACxC,OAAO;wBAAE,OAAO,MAAM,KAAK;oBAAC;oBAC5B,SAAS;wBAAE,SAAS;oBAAK;gBAC3B;gBACA,IAAI,CAAC,MAAM,OAAO;gBAClB,MAAM,KAAK,MAAM,mMAAM,CAAC,OAAO,CAAC,MAAM,QAAQ,EAAE,KAAK,QAAQ;gBAC7D,IAAI,CAAC,IAAI,OAAO;gBAChB,OAAO;oBACL,IAAI,KAAK,EAAE;oBACX,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,IAAI,IAAI,KAAK,OAAO,EAAE,eAAe;oBAChD,aAAa,KAAK,OAAO,EAAE;gBAC7B;YACF;QACF;KACD;IACD,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,MAAM,GAAG,AAAC,KAAa,EAAE;gBAC/B,MAAM,WAAW,GAAG,AAAC,KAAa,WAAW;YAC/C;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,QAAQ,MAAM,GAAG,MAAM,MAAM;YAC7B,QAAQ,WAAW,GAAG,MAAM,WAAW;YACvC,IAAI,QAAQ,IAAI,EAAE,QAAQ,IAAI,CAAC,WAAW,GAAG,MAAM,WAAW;YAC9D,OAAO;QACT;IACF;AACF;AAEA,MAAM,UAAU,IAAA,8PAAQ,EAAC","debugId":null}}]
}