{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/conni/Documents/Pathway/handcrafted-haven/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst globalForPrisma = globalThis as unknown as { prisma?: PrismaClient };\r\n\r\nexport const prisma =\r\n  globalForPrisma.prisma ??\r\n  new PrismaClient({\r\n    // log: [\"query\", \"info\", \"warn\", \"error\"],\r\n  });\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  globalForPrisma.prisma = prisma;\r\n}"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6IAAY,CAAC;AAEjB;AAEF,wCAA2C;IACzC,gBAAgB,MAAM,GAAG;AAC3B","debugId":null}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/conni/Documents/Pathway/handcrafted-haven/app/api/auth/register/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { prisma } from \"@/lib/prisma\";\r\nimport { z } from \"zod\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\n// Ensure this route runs on the Node runtime (Prisma/bcrypt need Node)\r\nexport const runtime = \"nodejs\";\r\n\r\nconst pathOrUrl = z.union([\r\n  z.string().url(\"Invalid URL\"),\r\n  z.string().regex(/^\\/[^\\s]+$/, \"Use a path like /artisans/luna-pottery.jpg\"),\r\n  z.literal(\"\"), // allow empty from client, we'll turn into null\r\n]);\r\n\r\nconst schema = z.object({\r\n  email: z.string().email(),\r\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\r\n  name: z.string().optional(),\r\n  displayName: z.string().min(2, \"Display name is required\"),\r\n  studioName: z.string().optional(),\r\n  bio: z.string().optional(),\r\n  city: z.string().optional(),\r\n  country: z.string().optional(),\r\n  avatarUrl: pathOrUrl.optional(),\r\n  coverUrl: pathOrUrl.optional(),\r\n});\r\n\r\nfunction slugify(s: string) {\r\n  return s.toLowerCase().trim().replace(/[^a-z0-9]+/g, \"-\").replace(/(^-|-$)+/g, \"\");\r\n}\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const body = await req.json();\r\n    const parsed = schema.parse(body);\r\n\r\n    // Early email uniqueness check\r\n    const existing = await prisma.user.findUnique({ where: { email: parsed.email } });\r\n    if (existing) {\r\n      return NextResponse.json(\r\n        { errors: { email: [\"Email already in use.\"] } },\r\n        { status: 422 }\r\n      );\r\n    }\r\n\r\n    const passwordHash = await bcrypt.hash(parsed.password, 10);\r\n\r\n    // Unique slug based on displayName\r\n    const base = slugify(parsed.displayName) || \"artisan\";\r\n    let slug = base;\r\n    let i = 1;\r\n    // Requires `slug` to be @unique on ArtisanProfile\r\n    while (await prisma.artisanProfile.findUnique({ where: { slug } })) {\r\n      slug = `${base}-${i++}`;\r\n    }\r\n\r\n    // Normalize empty strings -> null (DB columns are nullable)\r\n    const avatarUrl =\r\n      parsed.avatarUrl && parsed.avatarUrl.length ? parsed.avatarUrl : null;\r\n    const coverUrl =\r\n      parsed.coverUrl && parsed.coverUrl.length ? parsed.coverUrl : null;\r\n\r\n    // Create user + artisan profile\r\n    const user = await prisma.user.create({\r\n      data: {\r\n        email: parsed.email,\r\n        name: parsed.name || parsed.displayName,\r\n        password: passwordHash,\r\n        role: \"ARTISAN\",\r\n        artisan: {\r\n          create: {\r\n            displayName: parsed.displayName,\r\n            studioName: parsed.studioName || \"\",\r\n            bio: parsed.bio || \"\",\r\n            city: parsed.city || \"\",\r\n            country: parsed.country || \"\",\r\n            avatarUrl, // nullable\r\n            coverUrl,  // nullable\r\n            slug,\r\n          },\r\n        },\r\n      },\r\n      include: { artisan: true },\r\n    });\r\n\r\n    return NextResponse.json({ ok: true, slug: user.artisan?.slug }, { status: 201 });\r\n  } catch (e: unknown) {\r\n    // Zod validation errors\r\n    if (e instanceof z.ZodError) {\r\n      const flat = e.flatten();\r\n      return NextResponse.json(\r\n        { errors: { ...flat.fieldErrors, form: flat.formErrors } },\r\n        { status: 422 }\r\n      );\r\n    }\r\n\r\n    // Prisma unique constraint on email (defensive check without importing Prisma error types)\r\n    const pe = e as { code?: string; meta?: { target?: string[] } };\r\n    if (pe?.code === \"P2002\" && Array.isArray(pe?.meta?.target) && pe.meta!.target!.includes(\"email\")) {\r\n      return NextResponse.json(\r\n        { errors: { email: [\"Email already in use.\"] } },\r\n        { status: 422 }\r\n      );\r\n    }\r\n\r\n    const ge = e as { message?: string };\r\n    return NextResponse.json({ error: ge?.message ?? \"Invalid request\" }, { status: 400 });\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}